name: Deploy to Google Cloud Run

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Google Cloud CLI
        uses: google-github-actions/setup-gcloud@v1
        with:
          version: 'latest'

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Configure gcloud for Artifact Registry
        run: |
          gcloud auth configure-docker asia-south2-docker.pkg.dev
          gcloud auth configure-docker me-central1-docker.pkg.dev

      - name: Build Docker image
        run: |
          docker build -t asia-south2-docker.pkg.dev/tensile-cogency-404310/gcr/facial-detection .
  
      - name: Push Docker image to Artifact Registry
        run: |
          docker push asia-south2-docker.pkg.dev/tensile-cogency-404310/gcr/facial-detection
          docker tag asia-south2-docker.pkg.dev/tensile-cogency-404310/gcr/facial-detection me-central1-docker.pkg.dev/tensile-cogency-404310/gcr/facial-detection
          docker push me-central1-docker.pkg.dev/tensile-cogency-404310/gcr/facial-detection
  
      - name: Deploy to Google Cloud Run
        run: |
          gcloud run deploy facial-recognition-service-asia-south2 --image asia-south2-docker.pkg.dev/tensile-cogency-404310/gcr/facial-detection --platform managed --region asia-south2 --allow-unauthenticated --set-env-vars DATABASE_URL=${{ secrets.DATABASE_URL }}
          gcloud run deploy facial-recognition-service-me-central1 --image me-central1-docker.pkg.dev/tensile-cogency-404310/gcr/facial-detection --platform managed --region me-central1 --allow-unauthenticated --set-env-vars DATABASE_URL=${{ secrets.DATABASE_URL }}

      - name: Set up Global Load Balancer
        run: |
          # Add Cloud Run services to backend services using serverless NEG
          gcloud compute network-endpoint-groups describe facial-recognition-service-asia-south2 --region asia-south2 || gcloud compute backend-services add-backend facial-recognition-backend-asia-south2 --global --network-endpoint-group=facial-recognition-service-asia-south2 --network-endpoint-group-region=asia-south2 --balancing-mode=RATE --max-rate=100
          gcloud compute network-endpoint-groups describe facial-recognition-service-me-central1 --region me-central1 ||gcloud compute backend-services add-backend facial-recognition-backend-me-central1 --global --network-endpoint-group=facial-recognition-service-me-central1 --network-endpoint-group-region=me-central1 --balancing-mode=RATE --max-rate=100

          # Create URL map
          gcloud compute url-maps describe facial-recognition-url-map || gcloud compute url-maps create facial-recognition-url-map --default-service=facial-recognition-backend-asia-south2

          # Add path matchers
          gcloud compute url-maps add-path-matcher facial-recognition-url-map --default-service=facial-recognition-backend-me-central1 --path-matcher-name=me-central1

          # Create HTTP proxy
          gcloud compute target-http-proxies describe http-lb-proxy || gcloud compute target-http-proxies create http-lb-proxy --url-map=facial-recognition-url-map

          # Create forwarding rule
          gcloud compute forwarding-rules describe http-content-rule || gcloud compute forwarding-rules create http-content-rule --global --target-http-proxy=http-lb-proxy --ports=80
